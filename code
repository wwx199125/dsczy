#include<stdio.h>
#include<stdlib.h>
#include <fstream>
#include <iostream>
#include<cstdio>
#include<cstdlib>
using namespace std;
#define HashSize 50
#define MAX 100
#define LH 1
#define EH 0
#define RH -1
FILE *fp;
int data[20];
int data2[20];

//********************************************************************
int Binary_Search(int key,int low,int high)//折半查找
{
	int mid;
	if(low == high)
	{
		if(data[low] == key)
			return low;
		else
			return -1;
	}
	else
	{
		mid = (low + high) / 2;
		if(mid == low)
			mid++;
			if(key < data[mid])
			return Binary_Search(key, low, mid - 1);
		else
			return Binary_Search(key, mid, high);
	}
}

void zheban()
{
	int locate;
	int key;
    if((fp=fopen("D:\\编程的文件\\查找算法性能比较\\折半查找.txt","r"))==NULL)
	{
	    printf("cannot open file\n");
	}
    for(int i=0;i<20;i++)
	fscanf(fp,"%d",&data[i]);
	fclose(fp);
    printf("\n有序序列为：\n");
	for(int i=0;i<20;i++)
		printf("%d ",data[i]);
    printf("\n请输入要查找的数: ");
    scanf("%d", &key);
    if(key != -1)
    {
        locate = Binary_Search(key,0,19);
        if(locate != -1)
        {
            printf("\n值%d的位置为:%d\n\n", key, locate+1);
        }
        else
        {
            printf("没有找到%d\n", key);
        }
    }
    else
        exit(1);
    cout<<endl;
}
//************************************************************************
typedef struct
{
    int key;   //关键字
    int data;    //信息域
}Record;                                  //用给定的关键字值与表中其他元素的关键字值比较
typedef struct
{
    Record r[MAX+1];
    int length;
}SqTable;
int search(SqTable s,int k)
{
  int i;
  s.r[0].key=k;
  i=s.length;      //用的逆序
  while(s.r[i].key!=k)
        i--;
  return i;
}
void sunxu()
{
    SqTable s;
    int wz,i,len,x,y;
   printf("请输入表长:\n");
    scanf("%d",&len);
    s.length=len;
    printf("请输入表的各个元素:\n");
    for(i=1;i<=len;i++)
    {
        scanf("%d",&x);
        s.r[i].key=x;
    }
     printf("请输入要查找的元素:\n");
    scanf("%d",&y);
    wz=search(s,y);
    if(wz==0)
    {
        printf("不存在:\n");
    }
    else
        printf("位置为:%d",wz);
}
//************************************************************************
void fibonacci(int *f)//斐波那契数
{
	f[0] = 1;
	f[1] = 1;
	for(int i = 2;i < 20;++i)
		f[i] = f[i - 2] + f[i - 1];
}
int fibonacci_search(int *a,int key,int n)//斐波那契查找
{
	int low = 0,high = n - 1;
	int mid = 0;
	int k = 0;
	int F[20];
	fibonacci(F);
	while(n > F[k] - 1) //计算出n在斐波那契中的数列
		++k;
	for(int i = n;i < F[k] - 1;++i) //把数组补全
		a[i] = a[high];
	while(low <= high)
	{
		mid = low + F[k-1] - 1;  //根据斐波那契数列进行黄金分割
		if(a[mid] > key)
		{
			high = mid - 1;
			k = k - 1;
		}
		else if(a[mid] < key)
		{
			low = mid + 1;
			k = k - 2;
		}
		else{
			if(mid <= high) //如果为真则找到相应的位置
				return mid;
			else
				return -1;
		}
	}
	return -1;
}
int Fibonacci()
{
	if((fp=fopen("D:\\编程的文件\\查找算法性能比较\\斐波那契.txt","r"))==NULL)
	{
	    printf("cannot open file\n");
	}
    for(int i=0;i<20;i++)
        fscanf(fp,"%d",&data[i]);
	fclose(fp);
    printf("\n有序序列为：\n");
	for(int i=0;i<20;i++)
        printf("%d ",data[i]);
	printf("\n");
	int k;
	printf("\n请输入要查找的数:\n");
	scanf("%d",&k);
	int pos = fibonacci_search(data,k,20);
	if(pos != -1)
		printf("\n值%d的位置为：%d\n\n", k, pos+1);
	else
        printf("没有找到%d\n", k);
	return 0;
}
//**************************************************************************
struct node//二叉排序树
{
    int data;
    struct node  *rlink;
    struct node  *llink;
};

struct node *tree;

void inordertraverse(struct node *tree)
{
    if(tree)
    {
        inordertraverse(tree->llink);
        cout<<tree->data<<" ";
        inordertraverse(tree->rlink);
    }
}

 struct node *find(struct node *tree, int x)  //二叉排序树的查找算法
{
   int f;
   struct node *p,*q;
   p=tree;
   f=0;
   q=( struct node *)malloc(sizeof (struct node));
   while((!f)&&(p!=NULL))
   {
     if(p->data==x)
        f=1;
    else
        if(x<p->data)
            p=p->llink;
        else
            p=p->rlink;
   }
   if(f)
    q=p;
   else
    q->data=NULL;
   return(q);
}


 struct node *findparents(struct node *tree, int x)  //二叉排序树双亲节点的查找算法
{
   int f;
   struct node *p,*q,*r;
   p=tree;
   f=0;
   q=( struct node *)malloc(sizeof (struct node));
   r=( struct node *)malloc(sizeof (struct node));
   r=NULL;
   while((!f)&&(p!=NULL))
   {
       if(p->data==x)
        f=1;
       else
        {
            r=p;
            if(x<p->data)
            {
                p=p->llink;
            }
            else
            {
                p=p->rlink;
            }
        }
    }
    if(f)
        q=p;
    else
        q->data=NULL;
   return(r);
}
struct node * insertree(struct node *tree,  int x )  //插入
{
   struct node *p,*q;
   if(tree==NULL)
   {
      p= (struct node *)malloc(sizeof(struct node));
      p->data=x;
      p->rlink=NULL;
      p->llink=NULL;
      tree=p;
   }
   else
   {  p=tree;
      while(p!=NULL)
      {
         q=p;
         if (x<p->data)
            p=p->llink;
         else
            p=p->rlink;
      }
      p=(struct node *)malloc(sizeof(struct node));
      p->data=x;
      p->rlink=NULL;
      p->llink=NULL;
      if (x<q->data)
        q->llink=p;
      else
        q->rlink=p;
   }
   return tree;
}


void detree(struct node *t, struct node *f, struct node *p)  //删除
{
    struct node *q,*s;
    int boo;
    boo=0;
    if((p->llink==NULL)||(p->rlink==NULL))
    {
        if(p->llink==NULL)
        {
            if(p==t)
                t=p->rlink;
            else
            {
                s=p->rlink;
                boo=1;
            }
        }
        else
        {
            if(p==t)
                t=p->llink;
            else
            {
                s=p->llink;
                boo=1;
            }
       }
    }
    else
    {
        q=p;
        s=q->rlink;
        while(s->llink!=NULL)
        {
            q=s;
            s=s->llink;
        }
        s->llink=p->llink;
        if (q!=p)
        {
            q->llink=s->rlink;
            s->rlink=p->rlink;
        }
        if(p==t)
            t=s;
        else
            boo=1;
    }
    if (boo==1)
    {
        if(p==f->llink)
            f->llink=s;
        else
            f->rlink=s;
    }
    free(p);
}
//**************************************************************************
typedef struct BTNode
{
 int data;
 int BF;//平衡因子（balance factor）
 struct BTNode *lchild,*rchild;
}BTNode,*BTree;
void R_Rotate(BTree *p)//以p为根节点的二叉排序树进行右旋转
{
 BTree L;
 L=(*p)->lchild;
 (*p)->lchild=L->rchild;
 L->rchild=(*p);
 *p=L;//p指向新的根节点
}
void L_Rotate(BTree *p)//以p为根节点的二叉排序树进行左旋转
{
 BTree R;
 R=(*p)->rchild;
 (*p)->rchild=R->lchild;
 R->lchild=(*p);
 *p=R;
}
void LeftBalance(BTree *T)
{
 BTree L,Lr;
 L=(*T)->lchild;
 switch(L->BF)
 {
  //检查T的左子树平衡度，并作相应的平衡处理
  case LH://新节点插入在T的左孩子的左子树上，做单右旋处理
   (*T)->BF=L->BF=EH;
   R_Rotate(T);
   break;
  case RH://新插入节点在T的左孩子的右子树上，做双旋处理
   Lr=L->rchild;
   switch(Lr->BF)
   {
    case LH:
     (*T)->BF=RH;
     L->BF=EH;
     break;
    case EH:
     (*T)->BF=L->BF=EH;
     break;
    case RH:
     (*T)->BF=EH;
     L->BF=LH;
     break;
   }
   Lr->BF=EH;
   L_Rotate(&(*T)->lchild);
   R_Rotate(T);
 }
}
void RightBalance(BTree *T)
{
 BTree R,Rl;
 R=(*T)->rchild;
 switch(R->BF)
 {
  case RH://新节点插在T的右孩子的右子树上，要做单左旋处理
   (*T)->BF=R->BF=EH;
   L_Rotate(T);
   break;
  case LH://新节点插在T的右孩子的左子树上，要做双旋处理
   Rl=R->lchild;
   switch(Rl->BF)
   {
    case LH:
     (*T)->BF=EH;
     R->BF=RH;
     break;
    case EH:
     (*T)->BF=R->BF=EH;
     break;
    case RH:
     (*T)->BF=LH;
     R->BF=EH;
     break;
   }
   Rl->BF=EH;
   R_Rotate(&(*T)->rchild);
   L_Rotate(T);
 }
}
bool InsertAVL(BTree *T,int e,bool *taller)//变量taller反应T长高与否
{
 if(!*T)
 {
  *T=(BTree)malloc(sizeof(BTNode));
  (*T)->data=e;
  (*T)->lchild=(*T)->rchild=NULL;
  (*T)->BF=EH;
  *taller=true;
 }
 else
 {
  if(e==(*T)->data)//不插入
  {
   *taller=false;
   return false;
  }
  if(e<(*T)->data)
  {
   if(!InsertAVL(&(*T)->lchild,e,taller))//未插入
    return false;
   if(*taller)//以插入左子树，且左子树变高
   {
    switch((*T)->BF)
    {
     case LH://原本左子树比右子树高，需要做左平衡处理
      LeftBalance(T);
      *taller=false;
      break;
     case EH://原本左右子树等高，现因左子树增高而树增高
      (*T)->BF=LH;
      *taller=true;
      break;
     case RH://原本右子树比左子树高，现在左右子树等高
      (*T)->BF=EH;
      *taller=false;
      break;
    }
   }
  }
  else
  {
   //应在T的右子树中搜寻
   if(!InsertAVL(&(*T)->rchild,e,taller))
    return false;
   if(*taller)//插入右子树，且右子树长高
   {
    switch((*T)->BF)
    {
     case LH://原本左子树比右子树高，现在左右子树等高
      (*T)->BF=EH;
      *taller=false;
      break;
     case EH://原本左右子树等高，现在右子树变高
      (*T)->BF=RH;
      *taller=true;
      break;
     case RH://原本右子树比左子树高，现在需做右平衡处理
      RightBalance(T);
      *taller=false;
      break;
    }
   }
  }
 }
 return true;
}
bool Find(BTree T,int key)
{
 if(!T)
  return false;
 else if(T->data==key)
  return true;
 else if(T->data<key)
  return Find(T->rchild,key);
 else
  return Find(T->lchild,key);
}
void Output(BTree T)
{
 if(T)
 {
  printf("%d",T->data);
  if(T->lchild||T->rchild)
  {
   printf("(");
   Output(T->lchild);
   printf(",");
   Output(T->rchild);
   printf(")");
  }
 }
}
void pingheng()
{
 int i,n;
 printf("请输入你将要建立几个节点的二叉树:\n");
 scanf("%d",&n);
 int A[n];
 int a,b;
 for(i=0;i<n;i++)
 {
     scanf("%d",&a);
     A[i]=a;
 }
 BTree T=NULL;
 bool taller;
 for(i=0;i<sizeof(A)/sizeof(int);i++)
  InsertAVL(&T,A[i],&taller);
  printf("建立好的平衡二叉树为:\n");
 Output(T);
 printf("\n");
 printf("请输入要查找的数:\n");
 scanf("%d",&b);
 if(Find(T,b))
  printf("%d 在二叉平衡数中!\n",b);
 else
  printf("%d 不在二叉平衡数中!\n",b);
}

//********************************************************

//散列法
typedef struct{  //哈希表线性探测再散列数据类型定义
    int key;          //关键字
    int si;       //插入成功时的次数
}HashTable1;

typedef struct Ha{   //哈希表链地址法数据类型定义

    int elem;           //数据项
    struct Ha *next2;   //指向下一个结点的指针
}HashTable2;

typedef struct{  //哈希表二次探测再散列法数据类型定义
    int elem[HashSize];     //表中储存数据元素的数组
    int count;              //表中储存数据元素的个数
    int size;              //哈希表的尺寸
}HashTable3;

void CreateHashTable1(HashTable1 *H,int *a,int num) //哈希表线性探测再散列(除留余数法)
{
    int i,d,cnt;
    for(i=0; i<HashSize; i++)     //给新哈希表初始化数据
	{
        H[i].key=0;         H[i].si=0;
	}
    for(i=0; i<num; i++)
	{
        cnt=1;
        d=a[i]%HashSize;     //构造哈希函数
        if(H[d].key==0)      //无冲突时，直接插入数据
		{
            H[d].key=a[i];
            H[d].si=cnt;
		}
        else{               //有冲突时，进行线性探测法解决冲突再插入
                do{
                    d=(d+1)%HashSize;
                    cnt++;
                }
                while(H[d].key!=0);
                H[d].key=a[i];
                H[d].si=cnt;
            }
    }
    printf("\n线性再探测哈希表已建成!\n");
        printf("散列表的位置:\n");
  for(i=0;i<20;i++)
        printf("%d  ",i);
        printf("\n");
        printf("关键字:\n");
  for(i=0;i<20;i++)
    printf("%d  ",H[i].key);
    printf("\n");
}

void CreateHashTable2(HashTable2 *H,int *a,int num)
{
    int key,i;
    HashTable2 *q,*qq;
    q=NULL;
    for (i=0; i<HashSize; i++)              //对哈希表进行初始化
    {
        H[i].elem = 0;
        H[i].next2=NULL;
    }
    for (i=0; i<num; i++)
	{
	    key=a[i]%HashSize;
		if(H[key].elem==0)
			H[key].elem=a[i];
		else
        {
            if(q!=NULL)     //若该位置已有数据
			{
                qq=q;
                q=q+1;
                q->elem=a[i];                //添加到已存在的结点后面
				q->next2=qq->next2;
				qq->next2=q;
			}
			else
            {
                q=(HashTable2*)malloc(sizeof(HashTable2));
				if(!q)
				{
                    printf("\n申请内存失败!请重新运行程序\n");
					exit(1);
				}
                q->elem=a[i];                     //添加到首结点后面
				q->next2=H[key].next2;
				H[key].next2=q;
            }
        }
    }
    printf("\n链表探索哈希表已建成!\n");
}

void SearchHash1(HashTable1 *h,int data)
{
    int d,i;
    d=data%HashSize; //哈希函数
    i=d;
    if(h[d].key==data)     //一次查找成功
        printf("\n数字%d的查找次数为：%d\n",h[d].key,h[d].si);
	else
	{
	    while(i<HashSize && h[d].key!=data )
	    {
            d=(d+1)%HashSize;
			i+=1;
        }
        if(i<HashSize)
			printf("\n数字%d的查找次数为：%d.\n",h[d].key,h[d].si);
		else
            printf("\n没有找到您所输入的数\n");
	}
}

int SearchHash2(HashTable2 *h,int data,int num)
{
    int d,cnt=1;
	HashTable2 *q;
    d=data%HashSize;       //哈希函数
	q=&h[d];
    if(q->elem==0)         //该位置上没有数据元素
	{
	    printf("\n没有找到您要查找的数\n");
		return 0;
    }
    while(q!=NULL)
	{
	    if(q->elem==data)
		{
		    printf("\n数字%d的查找次数为：%d\n",data,cnt);
			return 0;
        }
        else if(q->next2!=NULL)
		{
		    q=q->next2;
		    cnt++;
        }
		else
        {
            printf("\n没有找到您要查找的数\n");
            return 0;
		}
	}
	return 0;
	printf("\n");
}

void GetIn()
{
	if((fp=fopen("D:\\编程的文件\\查找算法性能比较\\散列法.txt","r"))==NULL)   //
	{
	    printf("cannot open file\n");
	}
    for(int i=0;i<20;i++)
        fscanf(fp,"%d",&data2[i]);
	fclose(fp);
    printf("\n序列为：\n");
	for(int i=0;i<20;i++)
		printf("%d ",data2[i]);
	printf("\n");
}

void mainmenu();

void menu1()
{
    int m;
    cout<<endl;
    cout<<"\t\t|------------------静态查找---------------|"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t1.折半查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t2.顺序查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t3.斐波拉契查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t4.退出静态查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"请选择：";
    cin>>m;
    while(m<1||m>4)
    {
        cout<<"输入有误，请重新输入！";
        cin>>m;
    }
    switch(m)
    {
        case 1:
            zheban();
            menu1();
            break;
        case 2:
            sunxu();
            menu1();
            break;
        case 3:
            Fibonacci();
            menu1();
            break;
        case 4:
            cout<<"退出静态查找！"<<endl;
            system("cls");
            mainmenu();
    }
}

void menu2()
{
    int m;
    cout<<endl;
    cout<<"\t\t|------------------动态查找---------------|"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t       1.建立二叉排序树\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t       2.二叉排序树查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t       3.二叉排序树插入\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t       4.二叉排序树删除\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t       5.平衡二叉树   \t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t       6.退出动态查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"请选择：";
    cin>>m;
    while(m<1||m>6)
    {
        cout<<"\n输入有误，请重新输入:\n";
        cin>>m;
    }
    switch(m)
    {
        case 1:
        {
            tree=(struct node*)malloc(sizeof(struct node));
            tree =NULL;
            cout<<"\n输入数字建立二叉排序树，以-1结束:"<<endl;
            while(1)
            {
                int y;
                cin>>y;
                if(-1==y)
                    break;
                tree=insertree(tree,y);
            }
            cout<<"\n中序遍历：";
            inordertraverse(tree);
            cout<<endl;
        }menu2();break;
        case 2 :                          //查找
        {
            int x;
            cout<<"\n请输入您要查找的数："<<endl;
            cin>>x;
            if(find(tree, x)->data==x)
                cout<<"\n已找到您要查找的数！"<<find(tree,x)->data<<endl;
            else
                cout<<"\n未找到您要查找的数！"<<endl;
        }menu2();break;
        case 3 :                         //插入
        {
            int x;
            cout<<"\n请输入您要插入的数"<<endl;
            cin>>x;
            insertree(tree, x );
            cout<<"\n中序遍历：";
            inordertraverse(tree) ;
            cout<<endl;
        }menu2();break;
        case 4:                            //删除
        {
            cout<<"\n请输入您要删除的数据"<<endl;
            struct node *f,*p;
            int x;
            cin>>x;
            p=find(tree, x);
            f=findparents(tree, x);
            detree(tree, f, p);
            cout<<"\n中序遍历：";
            inordertraverse(tree) ;
            cout<<endl;
		}menu2();break;
		case 5:
        {
            pingheng();
        }menu2();break;
		case 6:
		    cout<<"退出动态查找！"<<endl;
    }
    system("cls");
    mainmenu();
}


void menu3()
{   int m,d,i;
    HashTable1 hash1[HashSize];
    HashTable2 hash2[HashSize];
    HashTable3 * ha;                    //定义三种类型的哈希表
	ha=(HashTable3 *)malloc(sizeof(HashTable3));
    for(i=0; i<HashSize; i++)//哈希表的初始化
    {
        ha->elem[i]=0;
		ha->count=0;
    }
    ha->size=HashSize;
    while(1)
    {
    	cout<<endl;
        cout<<"\t\t|------------------散列法查找-------------|"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"\t\t|\t   1.从文件中读出数据并输出\t  |"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"\t\t|\t   2.线性再散列(除留余数法)建立哈希表\t  |"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"\t\t|\t   3.链地址法建立哈希表\t\t  |"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"\t\t|\t   4.线性再散列法(线性探测法)查找\t\t  |"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"\t\t|\t   5.链地址法查找\t\t  |"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"\t\t|\t   6.退出散列法查找\t\t  |"<<endl;
        cout<<"\t\t|-----------------------------------------|"<<endl;
        cout<<"请选择：";
        cin>>m;
        while(m<1||m>6)
        {
            cout<<"输入有误，请重新输入:";
            cin>>m;
        }
        switch(m)
        {
            case 1:
                GetIn();
                break;
            case 2:
                CreateHashTable1(hash1,data2,20);
                break;
            case 3:
                CreateHashTable2(hash2,data2,20);
                break;
            case 4:
                printf("请输入你查找的数据：");
                scanf("%d",&d);
                SearchHash1(hash1,d);
                break;
            case 5:
                printf("请输入你查找的数据：");
                cin>>d;
                SearchHash2(hash2,d,20);
                break;
            case 6:
            	system("cls");
                mainmenu();
        }
}


}
void mainmenu()
{
    int m;
    cout<<"\t\t|-------------------菜单------------------|"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t1.静态查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t2.动态查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t3.散列法查找\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"\t\t|\t\t4.退出\t\t\t  |"<<endl;
    cout<<"\t\t|-----------------------------------------|"<<endl;
    cout<<"请选择：";
    cin>>m;
    while(m<1||m>4) {cout<<"输入有误，请重新输入:";cin>>m;}
    switch(m)
    {
        case 1:
            menu1();
            mainmenu();
            break;
        case 2:
            menu2();
            mainmenu();
            break;
        case 3:
            menu3();
            mainmenu();
            break;
        case 4:
            cout<<"退出程序！";
            exit(0);
    }
}

int main()
{
    mainmenu();
    return 0;
} 
